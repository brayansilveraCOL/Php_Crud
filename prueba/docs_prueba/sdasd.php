<?php
require_once '../Controler/Crud_Persistencia.php';


class Generic extends Crud{
    private $className;
    private $excluir = [
        "className",
        "tabla",
        "conexion",
        "where",
        "sql",
        "excluir",
    ];

    public function __construct($tabla, $className, $props = null)
    {
        parent::__construct($tabla);

        $this->className = $className; // Setiamos la propiedad class name

        if(empty($props)){
            return;
        }
        foreach ($props as $llave=>$valor){
            $this->{$llave} = $valor;
        }
    }
    protected function obtenerAtrr(){
        $var = get_class_vars($this->className); //Obtenemos todos los atributos de la clase Usuario
        $atrr = []; // Variable para almacenar los atributos de la clase
        $count = count($var);
        foreach ($var as $llave=>$valor){
            if(!in_array($llave, $this->excluir)){ // Comprobamos que ninguno de los atributos que estan en excluir pasen a nuestra variable attr
                $atrr[] = $llave; // se almacena los atributos de la clase
            }
        }
        return $atrr;
    }

    protected function parsear($obj = null){
        try{
            $atributos  = $this->obtenerAtrr(); // Obtenemos los Atributos y se los asignamos a la variable atributos
            $objFinal = []; // Crear un objeto final que va tener la estructura
            //Obtener el objeto desde la clase o Modelo
            if($obj==null){ // Si el objeto se recibe nulo con el forech se va a armar el objeto
                foreach ($atributos as $llaves=>$valors){
                    if(isset($this->{$valors})){
                        $objFinal[$valors] = $this->{$valors};
                    }

                }
                return $objFinal;
            }

            //si el objeto si llega
            // Corregir el objeto que recibimoscon los atributos del modelo
            // Se obtienen las llaves validas para nuestro objeto
            foreach ($atributos as $indice =>$llaves){
                echo $llaves;
                if(isset($obj{$llaves})){
                    $objFinal[$llaves] = $obj[$llaves];
                }
            }

            return $objFinal;


        }catch (Exception $exp){
            throw new Exception("Error en ". $this->className . "En el metodo Parsear". $exp->getMessage());
        }
    }

    public function fill($obj){
        try {
            $atributos  = $this->obtenerAtrr(); // Se obtinen los atributos del modelo
            foreach ($atributos as $i =>$llaves){ // Recorrer los atributos
                if(isset($obj{$llaves})){
                    $this->{$llaves} = $obj[$llaves]; // Asignar los atrr de modelo los valores que vienen en el objeto
                }
            }
        }catch (Exception $exp){
            throw new Exception("Error en ". $this->className . "En el metodo Fill". $exp->getMessage());
        }
    }
    public function insert($obj=null)
    {
        $obj = $this->parsear($obj);
        return parent::insert($obj); // TODO: Change the autogenerated stub
    }

    public function update($obj)
    {
        $obj = $this->update($obj);
        return parent::update($obj); // TODO: Change the autogenerated stub
    }

    public function _get($Atributo)
    {
        return $this->{$Atributo};
    }
    public function _set($Atributo, $valor){
        $this->{$Atributo} = $valor;
    }
}